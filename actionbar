import java.io.IOException;
import java.util.HashMap;

import jp.co.c2inc.doctor.Const;
import jp.co.c2inc.doctor.TextSizeSettings;
import jp.co.c2inc.doctor.Utility;
import jp.co.c2inc.doctor.activity.list.BasicKnowledgeList;
import jp.co.c2inc.doctor.activity.list.BookmarkList;
import jp.co.c2inc.doctor.activity.list.ExaminationResultList;
import jp.co.c2inc.doctor.activity.list.HistoryList;
import jp.co.c2inc.doctor.activity.list.MemoList;
import jp.co.c2inc.doctor.activity.list.OtherOptionsMenuList;
import jp.co.c2inc.doctor.activity.list.SearchByFreeWordList;
import jp.co.c2inc.doctor.activity.list.SearchResultList;
import jp.co.c2inc.doctor.adapter.DrawerAdapter;
import jp.co.c2inc.doctor.database.Bookmarks;
import jp.co.c2inc.doctor.database.DatabaseHelper;
import jp.co.c2inc.doctor.helper.FragmentDialog;
import jp.co.c2inc.doctor.top.MainActivity;
import jp.co.c2inc.medical.act.MedicineUtility;
import jp.co.c2inc.medical.paid.au.CommonUtilities;
import jp.co.c2inc.medical.paid.au.R;
import jp.co.c2inc.medical.paid.au.ServerUtilities;

import org.json.JSONObject;

import android.app.ActionBar.LayoutParams;
import android.app.SearchManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.SearchView.OnQueryTextListener;
import android.support.v7.widget.SearchView.SearchAutoComplete;
import android.support.v7.widget.Toolbar;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.style.ImageSpan;
import android.util.Log;
import android.view.GestureDetector;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gcm.GCMRegistrar;

public class ActivityBase extends ActionBarActivity implements OnQueryTextListener{
	
	public static boolean closeFlag;
	protected String fileName;
	protected String id;
	HashMap<String, String> detailData;
	protected float textSize;
	protected DatabaseHelper dbHelper;
	protected SQLiteDatabase db;
	protected Cursor c;

	protected Toolbar toolBar;
	protected ActionBar actionBar;
	protected ActionBarDrawerToggle actionBarToggle;
	protected DrawerLayout drawer;
	
	protected SearchView sView;

	protected int HelpArrowX=0;
	protected int HelpArrowY=0;

	private GestureDetector gestDetect;

	protected static final String FILTER_CLOSE_SELF = "closeActivity";
	public static final String CHANGE_TEXT_SIZE = "changeTextSize";
	public static final String ACTIVITY_CLEAR = "activityClear";

	protected void sendCloseIntent(){

		Intent broadcastIntent = new Intent();
		broadcastIntent.setAction(FILTER_CLOSE_SELF);
		sendBroadcast(broadcastIntent);
	}

	public float getTextSize() {
		return this.textSize;
	}
	protected void setCloseFilter(){
		
	}

	protected void unregisterCloseFilter(){
		if(mHandleMessageReceiver!=null){
			Log.v("TAG", "ActivityBase unregisterReceiver起動");
			unregisterReceiver(mHandleMessageReceiver);
//			mHandleMessageReceiver=null;
		}
	}

	@Override
	public void onDestroy(){
		super.onDestroy();
		unregisterCloseFilter();
	}

//	BroadcastReceiver closeReceiver = new BroadcastReceiver(){
//		@Override
//		public void onReceive(Context context, Intent intent) {
//			//finish();
//		}
//	};
	
	public IntentFilter setIntentFilter() {
		IntentFilter intentFilter = new IntentFilter();
		intentFilter.addAction(CHANGE_TEXT_SIZE);
		intentFilter.addAction(ACTIVITY_CLEAR);
		return intentFilter;
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		
		this.textSize = TextSizeSettings.getSizeParam(this);
		registerReceiver(mHandleMessageReceiver, setIntentFilter());
		
//		getWindow().setFormat(PixelFormat.RGBA_4444);

//		actionBar = getSupportActionBar();

		//actionBar.setDisplayShowTitleEnabled(false);

		// ActionBarの背景色を変更する
		//int color = R.color.action_bar_background;
		//Drawable backgroundDrawable = getApplicationContext().getResources().getDrawable(color);
//		actionBar.setBackgroundDrawable(backgroundDrawable);

//		actionBar.setDisplayShowTitleEnabled(false);
		setCloseFilter();

	}

	@Override
	public void setContentView(int layoutResID){
		super.setContentView(R.layout.base_layout);
		
		toolBar = (Toolbar)findViewById(R.id.tool_bar);
		toolBar.setTitle("家庭医学大全科");
		toolBar.setTitleTextAppearance(this, R.style.LandTitleStyle);
		setSupportActionBar(toolBar);
		
		FrameLayout frame = (FrameLayout)findViewById(R.id.main_content);
		getLayoutInflater().inflate(layoutResID, frame);
		
		
		createDrawerMenu();
		drawer = (DrawerLayout)findViewById(R.id.drawer_layout);
		actionBarToggle = new ActionBarDrawerToggle(this,drawer,toolBar
				,R.string.drawer_open,R.string.drawer_close);
//		actionBarToggle = new ActionBarDrawerToggle(this,drawer
//				,R.drawable.menu,R.string.drawer_open,
//	            R.string.drawer_close){
//			@Override
//	        public void onDrawerOpened(View drawerView) {
//	        }
//		};
		
		drawer.setDrawerListener(actionBarToggle);
		
		actionBarToggle.setHomeAsUpIndicator(R.drawable.arrow_back);
//
//		actionBarToggle.syncState();
//		
//		toolBar.setNavigationIcon(R.drawable.arrow_back);
		
	}

	protected void createDrawerMenu(){

		ListView list = (ListView) findViewById(R.id.left_drawer);
        // Set the adapter for the list view
    //    list.setAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, getResources().getStringArray(R.array.drawer_item)));
		list.setAdapter(new DrawerAdapter(this));
        // Set the list's click listener
        list.setOnItemClickListener(drawerItemClickListener);
	}

	protected void resetDrawerMenu(){
		ListView list = (ListView) findViewById(R.id.left_drawer);
		list.setAdapter(new DrawerAdapter(this));
	}

	private OnItemClickListener drawerItemClickListener = new OnItemClickListener(){

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {

			Intent intent = new Intent();
			intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
			
			switch(position){
				case 0:
					Intent broadcastIntent = new Intent();
					broadcastIntent.setAction(ACTIVITY_CLEAR);
					sendBroadcast(broadcastIntent);
					break;
				case 10:
			        intent.setClass(getApplicationContext(), SearchResultList.class);
					intent.putExtra(Const.KEY_ARTICLE_ID, "parent");
					intent.putExtra(Const.KEY_ACTIONBAR_TITLE, "家庭医学大全科");
					startActivity(intent);
					sendCloseIntent();
					break;
				case 11:
					decorateIntent("ExaminationResultList",intent);
					startActivity(intent);
					sendCloseIntent();
					break;
				case 12:
					decorateIntent("BasicKnowledgeList",intent);
					startActivity(intent);
					sendCloseIntent();
					break;
				case 1:
					intent.setClass(getApplicationContext(), BookmarkList.class);
//					intent.putExtra(Const.KEY_LIST_TITLE, "ブックマーク一覧");
					intent.putExtra(Const.KEY_ACTIONBAR_TITLE, "ブックマーク");
					startActivity(intent);
					sendCloseIntent();
					break;
				case 2:
					intent.setClass(getApplicationContext(), HistoryList.class);
					intent.putExtra(Const.KEY_LIST_TITLE, "履歴");
					intent.putExtra(Const.KEY_ACTIONBAR_TITLE, "履歴");
					startActivity(intent);
					sendCloseIntent();
					break;
				case 6:
					Uri url = Uri.parse(getString(R.string.drawer_menu_link_to_app));
					Intent openBrowser = new Intent (Intent.ACTION_VIEW, url);
					startActivity(openBrowser);
					break;

				case 7:
					Intent emailToFriend = new Intent(android.content.Intent.ACTION_SEND);
					emailToFriend.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
					emailToFriend.setType("vnd.android.cursor.item/email");
					//emailToFriend.putExtra(android.content.Intent.EXTRA_EMAIL, new String[] {getString(R.string.mail_to)});
					emailToFriend.putExtra(android.content.Intent.EXTRA_SUBJECT, getString(R.string.mail_recommend_title));
					emailToFriend.putExtra(android.content.Intent.EXTRA_TEXT, getString(R.string.mail_recommend_body));
					startActivity(Intent.createChooser(emailToFriend, "友だちに教える"));
					break;

				case 8:
					Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
					emailIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
					emailIntent.setType("vnd.android.cursor.item/email");
					emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new String[] {getString(R.string.mail_to)});
					emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, getString(R.string.mail_subject));
					emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, getMailContent());
					startActivity(Intent.createChooser(emailIntent, "サポートメール送信"));
					break;

				case 9:
					intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
					intent.setClass(getApplicationContext(), OtherOptionsMenuList.class);
					startActivity(intent);
					break;
				case 3:
					intent.setClass(getApplicationContext(), MemoList.class);
					intent.putExtra(Const.KEY_LIST_TITLE, "メモ");
					intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
					startActivity(intent);
					break;
				case 5:
					TextSizeSettings settings = new TextSizeSettings(ActivityBase.this);
					if(ActivityBase.this.textSize != settings.selectTextSize()){
//						changeTextSize();	
					}
					
					break;
				case 4:
					showNotificationDialog("");
					break;
			}
			drawer.closeDrawers();
			
			
		}

	};

	protected void decorateIntent(String key,Intent intent){
		if(key.equals("ExaminationResultList")){
			intent.setClass(getApplicationContext(), ExaminationResultList.class);
			intent.putExtra(Const.KEY_CHART_ID, "parent");
//			intent.putExtra(Const.KEY_LIST_TITLE, "医療機関で受ける主な血液・尿・便の検査をまとめました。基準値は、医療機関によって若干、異なることがあります。");
			intent.putExtra(Const.KEY_ACTIONBAR_TITLE, "家庭医学大全科");
		}
		else if(key.equals("BasicKnowledgeList")){
			intent.setClass(getApplicationContext(), BasicKnowledgeList.class);
			intent.putExtra(Const.KEY_ARTICLE_ID, "parent");
//			intent.putExtra(Const.KEY_LIST_TITLE, "基礎知識");
			intent.putExtra(Const.KEY_ACTIONBAR_TITLE, "家庭医学大全科");
		}
	}

	private String getMailContent(){
		String phoneModel     = android.os.Build.MODEL;
		String phoneDevice    = android.os.Build.DEVICE;
		int androidVersion    = android.os.Build.VERSION.SDK_INT;
		PackageInfo pInfo=null;
		try {
			pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}
		String appliVersion = pInfo.versionName==null ? "":"\nAPPVER:"+pInfo.versionName;
		return "\ndevice:"+phoneDevice+"\nmodel:"+phoneModel+"\nSDK:"+androidVersion+appliVersion;
	}

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
	    super.onPostCreate(savedInstanceState);
	    actionBarToggle.syncState();
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
		super.onActivityResult(requestCode, resultCode, intent);

		if(resultCode == RESULT_OK){

			if(intent.getBooleanExtra("backToTop", false)){

				setResult(RESULT_OK, intent);
				finish();
			}

		}else{

			if(textSize != TextSizeSettings.getSizeParam(this)){
				changeTextSize();
			}
		}
	}

	public void changeTextSize(){

		changeTextSize(this);
	}

	public void changeTextSize(Context context){
		return;
	}


	@Override
	public void onPause(){

		super.onPause();

		if(this.c != null){
			this.c.close();
			this.c = null;
		}

		if(this.db != null){
			this.db.close();
			this.db = null;
		}
	}

	@Override
	public void onResume(){
		super.onResume();
		resetDrawerMenu();

	}

	protected void removeViews(View view){

		if(view != null){
			if(view instanceof Button) {
	            Button ib = (Button)view;
//	            ib.setBackgroundDrawable(null);
	            ib.setBackgroundResource(0);
	        } else if(view instanceof ImageView) {
	            ImageView iv = (ImageView)view;
//	            iv.setBackgroundDrawable(null);
	            iv.setBackgroundResource(0);
	            iv.setImageDrawable(null);
	        }

//			view.setBackgroundDrawable(null);
			view.setBackgroundResource(0);
	        if(view instanceof ViewGroup) {
	            ViewGroup vg = (ViewGroup)view;
	            int size = vg.getChildCount();
	            for(int i = 0; i < size; i++) {
	            	removeViews(vg.getChildAt(i));

	            }
	        }
		}
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		Log.v("TAG", "onKeyDown=keyCode" + keyCode + "/KeyEvent="+ event);
//		if(getParent() == null){
//			return super.onKeyDown(keyCode, event);
//		}

		if(keyCode == KeyEvent.KEYCODE_BACK){
			
			if(drawer.isDrawerOpen(Gravity.LEFT)) {
//			if(getParent() != null){

//				if(getParent() instanceof OptionsMenuGroupActivity){

//					((OptionsMenuGroupActivity)getParent()).goBackHistoryFromChild(false);

//				}else{
//					((IndexGroupActivity)getParent()).goBackHistoryFromChild();
//				}
				drawer.closeDrawer(Gravity.LEFT);

			}else {
				finish();
			}
			return false;

		}else if(keyCode == KeyEvent.KEYCODE_MENU){
			Log.v("TAG", "Menuが押されました");
			// ここにMenuボタン処理を記入
			if (drawer.isDrawerOpen(Gravity.LEFT)) {	
				// ドロワーが開いている場合
				drawer.closeDrawer(Gravity.LEFT);
			} else {									
				// ドロワーが閉じている場合
				drawer.openDrawer(Gravity.LEFT);
			}
//			Log.v("TAG","答えは"+drawer.isDrawerVisible(Gravity.LEFT));
//			Log.v("TAG","答えは"+drawer.isDrawerOpen(Gravity.LEFT));
//			openDrawer();
//			return getParent().onKeyDown(keyCode, event);

		}

		return super.onKeyDown(keyCode, event);
	}

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.menu, menu);

		MenuItem item = menu.findItem(R.id.searchBox);
		sView = (SearchView)MenuItemCompat.getActionView(item);
		sView.setOnQueryTextListener(this);

		Resources res = getResources();
		sView.setQueryHint(res.getString(R.string.queryHint));
		SearchAutoComplete sac = (SearchAutoComplete) sView.findViewById(R.id.search_src_text);
		sac.setHintTextColor(res.getColor(R.color.text_color_hint));
		
		// SearchViewのクローズアイコン設定
		ImageView searchCloseIcon = (ImageView)sView.findViewById(R.id.search_close_btn);
	    searchCloseIcon.setColorFilter(Color.parseColor("#ffffff"));

		ImageView searchImage = (ImageView)sView.findViewById(R.id.search_button);
		searchImage.setImageResource(R.drawable.search);
		SearchView.SearchAutoComplete searchAutoComplete = (SearchAutoComplete) sView.findViewById(R.id.search_src_text);
		SpannableStringBuilder ssb = new SpannableStringBuilder(" ");
		ssb.append(getResources().getString(R.string.search_hint));
		Drawable searchHintIcon = getResources().getDrawable(R.drawable.search);
		int textSize = (int)(searchAutoComplete.getTextSize()*1.25);
		searchHintIcon.setBounds(0,0,textSize,textSize);
		
		ssb.setSpan(new ImageSpan(searchHintIcon), 1, 2, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		searchAutoComplete.setHint(ssb);
		
//		((ImageView) sView.findViewById(R.id.search_button)).setAdjustViewBounds(true);
//		((ImageView) sView.findViewById(R.id.search_button)).setImageResource(R.drawable.search);
		
		MenuItem bookmark = menu.findItem(R.id.bookmark);
		bookmark.setIcon(R.drawable.bookmark_off);

		bookmark.setVisible(false);

		MenuItem arrow_back = menu.findItem(R.id.arrowBack);
		arrow_back.setIcon(R.drawable.arrow_back);

		arrow_back.setVisible(false);
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	// ActionBarのiconが選択された際の処理
	public boolean onOptionsItemSelected(MenuItem item){

		if (actionBarToggle.onOptionsItemSelected(item)) {
	        return true;
	    }

		Intent intent = new Intent();
		intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);

		//OtherDetailData data;
		switch(item.getItemId()){
			case android.R.id.home:
				finish();
				break;
			case R.id.bookmark:
				Bookmarks bookmark = new Bookmarks(this);
				try {
	
					if(detailData == null){
						Toast.makeText(this, "ブックマークに追加できません。", Toast.LENGTH_SHORT).show();
	
					}else{
						if(bookmark.isOverlap(this.detailData.get(Const.KEY_ARTICLE_ID))){
	
							StringBuilder builder = new StringBuilder(35);
							builder.append("article_id = '");
							builder.append(this.detailData.get(Const.KEY_ARTICLE_ID));
							builder.append('\'');
							if(bookmark.deleteData(builder.toString())){
								Toast.makeText(this, "ブックマークを削除しました。", Toast.LENGTH_SHORT).show();
								item.setIcon(R.drawable.bookmark_off);
							}
						}else{
							if(bookmark.saveData(this.detailData.get(Const.KEY_ARTICLE_ID), this.detailData.get(Const.KEY_TITLE))){
								Toast.makeText(this, "ブックマークに追加しました。", Toast.LENGTH_SHORT).show();
								item.setIcon(R.drawable.bookmark_on);
							}
						}
					}
	
				} catch (IOException e) {
	
					e.printStackTrace();
				}
				break;
	
			case R.id.arrowBack:
				break;
			// 15.02.17 コメントアウト
			/*case R.id.aboutThisApp:
				intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
				intent.setClass(this, OtherOptionsMenuList.class);
				startActivity(intent);
				break;*/
	//		case R.id.howTo:
	//			OtherDetailData howto = new OtherDetailData(this, 8);
	//			intent.setClass(this, OtherDetailPage.class);
	//			intent.putExtra("contentData", howto.getContents());
	//			intent.putExtra(Const.KEY_LIST_TITLE, "使い方");
	//			intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
	//			startActivity(intent);
	//			break;
			/*case R.id.memo:
				intent.setClass(this, MemoList.class);
				intent.putExtra(Const.KEY_LIST_TITLE, "メモ一覧");
				intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
				startActivity(intent);
				break;
			case R.id.fontSize:
				TextSizeSettings settings = new TextSizeSettings(this);
	
				if(this.textSize != settings.selectTextSize()){
					//changeTextSize();
				}
				break;
	
			case R.id.notification:
				showNotificationDialog("");
				break;*/
			case 1:
				//intent.setClass(this, BookmarkList.class);
				intent.setClass(this, OptionsMenuGroupActivity.class);
				intent.putExtra(Const.KEY_LIST_TITLE, "ブックマーク一覧");
				intent.putExtra(Const.KEY_MENU_ID, 1);
				//startActivity(intent);
				startActivityForResult(intent, Const.REQUEST_CODE_OPTIONS_MENU_DETAIL);
				break;
	
			case 2:
				//intent.setClass(this, HistoryList.class);
				intent.setClass(this, OptionsMenuGroupActivity.class);
				intent.putExtra(Const.KEY_LIST_TITLE, "閲覧履歴");
				intent.putExtra(Const.KEY_MENU_ID, 2);
				startActivityForResult(intent, Const.REQUEST_CODE_OPTIONS_MENU_DETAIL);
				break;
	
			case 3:
				//intent.setClass(this, MemoList.class);
				intent.setClass(this, OptionsMenuGroupActivity.class);
				intent.putExtra(Const.KEY_LIST_TITLE, "メモ一覧");
				intent.putExtra(Const.KEY_MENU_ID, 3);
				startActivity(intent);
				break;
	/*
			case 4:
				TextSizeSettings settings = new TextSizeSettings(this);
	
				if(this.textSize != settings.selectTextSize()){
					//changeTextSize();
				}
				break;
	*/
			case 6:
				intent.setClass(this, OptionsMenuGroupActivity.class);
				intent.putExtra(Const.KEY_LIST_TITLE, "その他");
				intent.putExtra(Const.KEY_MENU_ID, 4);
				//startActivityForResult(intent, Const.REQUEST_CODE_OPTIONS_MENU);
				startActivity(intent);
				break;

		}
		return true;
	}


	@Override
	public boolean onQueryTextChange(String arg0) {
		return false;
	}

	@Override
	public boolean onQueryTextSubmit(String query) {
		Intent intent = new Intent(this,SearchByFreeWordList.class);
		intent.putExtra(SearchManager.QUERY, query);
		startActivity(intent);
		return true;
	}

	protected FragmentDialog dialog;
	protected void showDialog(
		String tag,
		OnClickListener listener,
		FragmentDialog.OnCreateViewListener onCreateViewListener){

		dialog = new FragmentDialog(listener,onCreateViewListener);
		dialog.show(getSupportFragmentManager(), tag);
	}

	protected void showDialog(String title,
			String tag,
			OnClickListener listener,
			FragmentDialog.OnCreateViewListener onCreateViewListener){

			dialog = new FragmentDialog(listener,onCreateViewListener);
			dialog.setTitle(title);
			dialog.show(getSupportFragmentManager(), tag);
	}

	public void clickCloseDialog(View view){

		if(dialog != null){
			dialog.getDialog().dismiss();
		}
	}

	public View getRootView(){

		return findViewById(android.R.id.content);
	}

	private void showNotificationDialog(final String key){
		MedicineUtility.trackEvent(ActivityBase.this,"dialog", "notification", "displayed", 1L);

		JSONObject json = Utility.getDialogData(this);
		final JSONObject notification = json.optJSONObject("notification");
		showDialog(notification.optString("title"),"notification"+key,

		new OnClickListener(){

			@Override

			public void onClick(View v) {

				switch(v.getId()){

					case R.id.register:
						MedicineUtility.trackEvent(ActivityBase.this,"dialog", "notification", "register", 1L);
						Utility.setReceiveNotification(ActivityBase.this,true);
						registerNotification();
						Utility.registerAlarm(ActivityBase.this);
						clickCloseDialog(v);
					break;
					case R.id.unregister:
						GCMRegistrar.unregister(getApplicationContext());
						Utility.unregisterAlarm(ActivityBase.this);
						Utility.setReceiveNotification(ActivityBase.this,false);
					default:
						clickCloseDialog(v);
				}

			}

		},

		new FragmentDialog.OnCreateViewListener() {

			public View onCreateView(LayoutInflater i, ViewGroup c, Bundle b) {

				View view = i.inflate(R.layout.dialog_notification_advertise, null, false);

				TextView text = (TextView)view.findViewById(R.id.text);
				text.setText(notification.optString("text"));

				Button reg = (Button)view.findViewById(R.id.register);
				reg.setText(notification.optString("cta_yes"));

				Button unreg = (Button)view.findViewById(R.id.unregister);
				unreg.setText(notification.optString("cta_no"));

				return view;

			}

		});

	}



	AsyncTask<Void, Void, Void> mRegisterTask;

	protected void registerNotification(){

		GCMRegistrar.checkDevice(this);
		GCMRegistrar.checkManifest(this);

//        registerReceiver(mHandleMessageReceiver,
//                new IntentFilter(CommonUtilities.DISPLAY_MESSAGE_ACTION));

        final String regId = GCMRegistrar.getRegistrationId(this);

        if (regId.equals("")) {

            // Automatically registers application on startup.
            GCMRegistrar.register(this, CommonUtilities.SENDER_ID);

        } else {

            // Device is already registered on GCM, check server.
            if (GCMRegistrar.isRegisteredOnServer(this)) {

            	// Skips registration.

            } else {

                // Try to register again, but not in the UI thread.
                // It's also necessary to cancel the thread onDestroy(),
                // hence the use of AsyncTask instead of a raw thread.
                final Context context = this;

                mRegisterTask = new AsyncTask<Void, Void, Void>() {

                    @Override
                    protected Void doInBackground(Void... params) {

                        boolean registered =
                                ServerUtilities.register(context, regId);

                        // At this point all attempts to register with the app
                        // server failed, so we need to unregister the device
                        // from GCM - the app will try to register again when
                        // it is restarted. Note that GCM will send an
                        // unregistered callback upon completion, but
                        // GCMIntentService.onUnregistered() will ignore it.
                        if (!registered) {
                            GCMRegistrar.unregister(context);
                        }

                        return null;
                    }

                    @Override
                    protected void onPostExecute(Void result) {
                        mRegisterTask = null;
                    }

                };

                mRegisterTask.execute(null, null, null);

            }

        }

	}
	// 受信機テスト用
	private final BroadcastReceiver mHandleMessageReceiver =
    new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
        	recive(intent);
//            String newMessage = intent.getExtras().getString(EXTRA_MESSAGE);
//            mDisplay.append(newMessage + "\n");
        }
    };
    
    public void recive(Intent intent){
    	if (intent.getAction().toString().equals(CHANGE_TEXT_SIZE)){
    		changeTextSize();
    	} else if (intent.getAction().toString().equals(ACTIVITY_CLEAR)) {
    		finish();
    	}
    	
    }

}
